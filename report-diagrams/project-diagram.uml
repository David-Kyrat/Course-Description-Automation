@startuml
skinparam linetype ortho

package ch.sealedconcept {
  entity Aug <<(O,red) case object>>
  entity Bachelor <<(O,red) case object>>
  interface CourseActivity << sealed trait >>
  class CourseHours << case class >>
  interface ExaSession << sealed trait >>

  entity Exercices <<(O,red) case object>>

  entity Jan <<(O,red) case object>>
  entity Jul <<(O,red) case object>>

  entity Lectures <<(O,red) case object>>
  entity Master <<(O,red) case object>>
  entity Phd <<(O,red) case object>>
  entity Practice <<(O,red) case object>>
  interface SPType << sealed trait >>
  interface SealedConceptObject<T> << sealed trait >>
  interface Semester << sealed trait >>
  entity Spring <<(O,red) case object>> 
  entity Autumn <<(O,red) case object>>
  entity Yearly <<(O,red) case object>>

  interface SealedConceptObject<T> {
    + {abstract} jsonKey(): String
    + {abstract} ALL(): Vector<T>
    + {abstract} ALL_MAP(): Map<String, T>
  }

  interface Semester {
    + makeupSession: ExaSession
    + session(): ExaSession
  }

}
package ch {
  class RequestHandler    << case class >> {
    - RequestHandler(req: String, page: Int)
    ---
    + {static} baseUrl: String
    + {static} studPlanUrl
    + {static} courseUrl
    --
    - request(url: String): String
    + apply(): Resp
    + next(nextPage: Int): RequestHandler
    --
    + {static} get(): RequestHandler
    + {static} course(id:Int): RequestHandler)
    + {static} studyPlan(id:Int): RequestHandler
  }
  class Response      << case class >> {
    + Response(res: string, val: page:Int)
    --
    + jsonObj(): JsonObject
    + hasNext(): Boolean
    --
    - {static} gson: com.google.gson.Gson
  }
  class Course    << case class >> {
    + Course(id: String, year: Int, title:String, spType: SPType, spYear: String,
       semester: Semester, objective: String, description: String, language: String,
       faculty: String, evalMode: String, hoursNb: CourseHours, documentation: String,
       authors: Vector<String>, studyPlan: Map<String, (Int, Int)>, various: String,
       comments: String)
    --
    (// other field not in constructor:)
    + format: Option<String>
    + preRequisites: Option<String>
    + usefulFor: Option<String>
    --
    + get(id: String, year: Int) : JsonObject
    - simpleResolveSealedConcept<T, U >: T>(jo: JsonObject,
    sco: SealedConceptObject<T>): U
    - resolveCourseHours()
    - resolveAuthors()
    - resolveStudyPlan()
    ...
    + factory(id: String, year: Int): Course // calls get() and works on JsonObject
  }


  class StudyPlan << case class >> {
    + StudyPlan(id: String, year: Int)
    --
    + faculty: String
    + section: String
    + courses: Vector[Course]
  }
}




Jan               --[dashed]up>  ExaSession          
Aug               --[dashed]up>  ExaSession          
Jul               --[dashed]up>  ExaSession          
ExaSession        -up*  Semester
Bachelor          --[dashed]up>  SPType              
Master            --[dashed]up>  SPType              
Phd               --[dashed]up>  SPType              
Semester          --[#008200]up-|>  SealedConceptObject 
Spring            --[dashed]up->  Semester
Autumn            --[dashed]up->  Semester
Yearly            --[dashed]up->  Semester
ExaSession        --[#008200]up-|>  SealedConceptObject 
Lectures          --[dashed]up>   CourseActivity
Exercices         --[dashed]up>   CourseActivity  
Practice          --[dashed]up>   CourseActivity
SPType            --[#008200]up-|>  SealedConceptObject 
CourseHours       --[#008200]up-|>  SealedConceptObject
CourseActivity    --[#008200]up-|>  SealedConceptObject


SealedConceptObject --up-* Course
Course -up-o StudyPlan
Course -> RequestHandler
RequestHandler -* Response

@enduml
